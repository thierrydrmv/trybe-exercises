use('cinema');
db.movies.find();

// 1.Utilizando o operador $all, retorne todos os filmes que contenham action e adventure no array category.
use('cinema');
db.movies.find({ category: { $all: ['action', 'adventure'] } });

// 2.ðŸš€ Agora retorne os filmes que contenham action e sci-fi no array category e possuem nota do IMDB maior do que 7.
use('cinema');
db.movies.find({ $and: [{ category: { $all: ['action', 'sci-fi'] } }, { imdbRating: { $gt: 7 } }] });

// 3.Retorne todos os filmes com ratings maior do que 103, exibindo apenas os campos title e ratings.
use('cinema');
db.movies.find({ ratings: { $elemMatch: { $gt: 103 } } }, { title: 1, ratings: 1, _id: 0 })

// 4.ðŸš€ Retorne todos os filmes com ratings entre 100 e 105, exibindo apenas os campos title e ratings.
use('cinema');
db.movies.find({ ratings: { $elemMatch: { $gte: 103, $lte: 105 } } }, { title: 1, ratings: 1, _id: 0 });

// 5.ðŸš€ Retorne todos os filmes onde ao menos um elemento de ratings esteja entre 64 e 105 e seja divisÃ­vel por 9, exiba apenas os campos title e ratings.
use('cinema');
db.movies.find({ ratings: { $elemMatch: { $gte: 64, $lte: 105, $mod: [9, 0] }}  }, { title: 1, ratings: 1, _id: 0 });

// 6.Retorne os filmes da categoria adventure e com ratings maior do que 103, exibindo apenas os campos title, ratings e category.
use('cinema');
db.movies.find({ category: 'adventure', ratings: { $gt: 103 } }, { title: 1, ratings: 1, category: 1, _id: 0 });

// 7.Retorne somente o tÃ­tulo de todos os filmes com dois elementos no array category.
use('cinema');
db.movies.find({ category: { $size: 2 }}, { _id: 0, title: 1 });

// 8.ðŸš€ Retorne somente o tÃ­tulo de todos os filmes com quatro elementos no array ratings.
use('cinema');
db.movies.find({ ratings: { $size: 4 }}, { _id: 0, title: 1 });

// 9.Busque os filmes em que o mÃ³dulo 5 do campo budget seja 0 e que o array category tenha tamanho 2.
use('cinema');
db.movies.find({ $and: [{ budget: { $mod: [5, 0] } }, { category: { $size: 2 } }] })

// 10.ðŸš€ Retorne os filmes da categoria "sci-fi" ou que possua o ratings maior do que 199, exibindo apenas os campos title, ratings e category.
use('cinema');
db.movies.find({ $or: [{ category: 'sci-fi' }, { ratings: { $elemMatch: { $gt: 199 } } }] }, { title: 1, ratings: 1, category: 1, _id: 0 })

// 11.Retorne os filmes em que o ratings possua tamanho 4 e que seja da category "adventure" ou "family", mas que nÃ£o tenha o imdbRating menor que 7.
use('cinema');
db.movies.find({ $and: [{ ratings: { $size: 4 } }, { $or: [{ category: 'adventure'}, { category: 'family'}] }, { imdbRating: { $gte: 7 } } ] });

// 12.ðŸš€ Utilizando o operador $regex, retorne todos os filmes em que a descriÃ§Ã£o comece com a palavra "The".
use('cinema');
db.movies.find({ description: { $regex: /^the/i } });

// 13.Utilizando o operador $regex, retorne todos os filmes em que a descriÃ§Ã£o termine com a palavra "humanity.".
use('cinema');
db.movies.find({ description: { $regex: /humanity.$/i } });

// 14.Utilizando o operador $expr, retorne todos os filmes em que o budget seja menor do que o grossWorldwide.
use('cinema');
db.movies.find({ $expr: { $lt: ['$budget', '$grossWorldwide'] } });